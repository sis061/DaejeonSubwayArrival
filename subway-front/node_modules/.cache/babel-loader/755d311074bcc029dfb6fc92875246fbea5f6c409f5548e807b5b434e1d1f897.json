{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// import { useParams } from \"react-router-dom\";\n\n// import { useSelector } from \"react-redux\";\n// import axios from \"axios\";\n\n// function ArrivalInfo() {\n//   let { id } = useParams();\n//   const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n//   const [timeData, setTimeData] = useState([]);\n\n//   const callApi = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n//       const resultList = response.data.response.body.items.item;\n//       setTimeData(resultList);\n//     } catch (error) {\n//       console.error(\"Error fetching arrival info:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     callApi();\n//   }, [id]);\n\n//   //----------------------------------------\n\n//   // console.log(timeData)\n\n//   const currentHour = new Date().getHours();\n//   const currentDay = new Date().getDay();\n//   const currentMinute = new Date().getMinutes();\n\n//   const resStNum = timeData.filter((data)=> data.stNum === Number(id));\n//   const resDay = resStNum.filter((data)=> 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n//   const resDrctUp = resDay.filter((data)=> data.drctType === 0);\n//   const stationMinuteUp = resDrctUp.map((data)=>data?.tmList.split(' '));\n//   const stationHourUp = resDrctUp.map(data => data.tmZone);\n\n//   console.log(resDrctUp);\n\n//   const calculateRemainingTime = (hour, minute) => {\n//     const currentIndex = stationHourUp.indexOf(hour);\n//     const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n//     const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n//       const currentMinuteValue = parseInt(arrivalMinute);\n//       if (currentMinuteValue > minute) {\n//         return { hour, minute: currentMinuteValue - minute };\n//       }\n//       return null;\n//     }).filter(Boolean);\n\n//     if (remainingTime.length > 0) {\n//       return remainingTime[0];\n//     }\n\n//     const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n//     const nextHour = stationHourUp[nextHourIndex];\n//     const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n//     const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n//     return { hour: nextHour, minute: nextHourRemainingMinutes };\n//   };\n\n//   const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n//   console.log(`남은 시간: ${remainingTime.minute}분`);\n\n//   return (\n//     <>\n//       <h1>{StationIdData[id-101].name}</h1>\n//       <h2> {currentHour} 시</h2>\n//       {/* <h2>{timeData[0]?.tmList.split(\" \")[0]} 분</h2> */}\n//     </>\n//   );\n// }\n\n// export default ArrivalInfo;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ArrivalInfo() {\n  _s();\n  const {\n    id\n  } = useParams();\n  const StationIdData = useSelector(state => state.StationNameData.stationId);\n  const [timeData, setTimeData] = useState([]);\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n  useEffect(() => {\n    callApi();\n  }, [id]);\n  const currentHour = new Date().getHours();\n  const currentDay = new Date().getDay();\n  const currentMinute = new Date().getMinutes();\n  const resStNum = timeData.filter(data => data.stNum === Number(id));\n  const resDay = resStNum.filter(data => 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n  const resDrctUp = resDay.filter(data => data.drctType === 0);\n  const stationMinuteUp = resDrctUp.map(data => data === null || data === void 0 ? void 0 : data.tmList.split(\" \"));\n  const stationHourUp = resDrctUp.map(data => data.tmZone);\n  console.log(resDrctUp);\n  const calculateRemainingTime = (hour, minute) => {\n    const currentIndex = stationHourUp.findIndex(h => h === hour);\n    for (let i = 0; i < stationHourUp.length; i++) {\n      const index = (currentIndex + i) % stationHourUp.length;\n      const minuteArrayForHour = stationMinuteUp[index];\n      for (let j = 0; j < minuteArrayForHour.length; j++) {\n        const currentMinuteValue = parseInt(minuteArrayForHour[j]);\n        if (currentMinuteValue > minute) {\n          return {\n            hour,\n            minute: currentMinuteValue - minute\n          };\n        }\n      }\n    }\n\n    // If no future time is found, get the first time for the next day\n    const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n    const nextHour = stationHourUp[nextHourIndex];\n    const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n    const nextHourRemainingMinutes = 60 - minute + nextMinuteValue;\n    return {\n      hour: nextHour,\n      minute: nextHourRemainingMinutes\n    };\n  };\n  const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n  console.log(`남은 시간: ${remainingTime.minute}분`);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: StationIdData[id - 101].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", currentHour, \" \\uC2DC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: `도착까지 ${remainingTime.minute}분 남았습니다.`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ArrivalInfo, \"vjNaqqgHCDQ3RiVDamtV0pi8j08=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ArrivalInfo;\nexport default ArrivalInfo;\nvar _c;\n$RefreshReg$(_c, \"ArrivalInfo\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useSelector","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ArrivalInfo","_s","id","StationIdData","state","StationNameData","stationId","timeData","setTimeData","callApi","response","get","resultList","data","body","items","item","error","console","currentHour","Date","getHours","currentDay","getDay","currentMinute","getMinutes","resStNum","filter","stNum","Number","resDay","dayType","resDrctUp","drctType","stationMinuteUp","map","tmList","split","stationHourUp","tmZone","log","calculateRemainingTime","hour","minute","currentIndex","findIndex","h","i","length","index","minuteArrayForHour","j","currentMinuteValue","parseInt","nextHourIndex","nextHour","nextMinuteValue","nextHourRemainingMinutes","remainingTime","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// import { useParams } from \"react-router-dom\";\n\n// import { useSelector } from \"react-redux\";\n// import axios from \"axios\";\n\n// function ArrivalInfo() {\n//   let { id } = useParams();\n//   const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n//   const [timeData, setTimeData] = useState([]);\n\n//   const callApi = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n//       const resultList = response.data.response.body.items.item;\n//       setTimeData(resultList);\n//     } catch (error) {\n//       console.error(\"Error fetching arrival info:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     callApi();\n//   }, [id]);\n\n//   //----------------------------------------\n\n//   // console.log(timeData)\n\n//   const currentHour = new Date().getHours();\n//   const currentDay = new Date().getDay();\n//   const currentMinute = new Date().getMinutes();\n\n//   const resStNum = timeData.filter((data)=> data.stNum === Number(id));\n//   const resDay = resStNum.filter((data)=> 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n//   const resDrctUp = resDay.filter((data)=> data.drctType === 0);\n//   const stationMinuteUp = resDrctUp.map((data)=>data?.tmList.split(' '));\n//   const stationHourUp = resDrctUp.map(data => data.tmZone);\n\n//   console.log(resDrctUp);\n\n//   const calculateRemainingTime = (hour, minute) => {\n//     const currentIndex = stationHourUp.indexOf(hour);\n//     const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n//     const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n//       const currentMinuteValue = parseInt(arrivalMinute);\n//       if (currentMinuteValue > minute) {\n//         return { hour, minute: currentMinuteValue - minute };\n//       }\n//       return null;\n//     }).filter(Boolean);\n\n//     if (remainingTime.length > 0) {\n//       return remainingTime[0];\n//     }\n\n//     const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n//     const nextHour = stationHourUp[nextHourIndex];\n//     const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n//     const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n//     return { hour: nextHour, minute: nextHourRemainingMinutes };\n//   };\n\n\n//   const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n//   console.log(`남은 시간: ${remainingTime.minute}분`);\n\n//   return (\n//     <>\n//       <h1>{StationIdData[id-101].name}</h1>\n//       <h2> {currentHour} 시</h2>\n//       {/* <h2>{timeData[0]?.tmList.split(\" \")[0]} 분</h2> */}\n//     </>\n//   );\n// }\n\n// export default ArrivalInfo;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nfunction ArrivalInfo() {\n  const { id } = useParams();\n  const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n  const [timeData, setTimeData] = useState([]);\n\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  const currentHour = new Date().getHours();\n  const currentDay = new Date().getDay();\n  const currentMinute = new Date().getMinutes();\n\n  const resStNum = timeData.filter((data) => data.stNum === Number(id));\n  const resDay = resStNum.filter((data) => (0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1));\n  const resDrctUp = resDay.filter((data) => data.drctType === 0);\n  const stationMinuteUp = resDrctUp.map((data) => data?.tmList.split(\" \"));\n  const stationHourUp = resDrctUp.map((data) => data.tmZone);\n\n  console.log(resDrctUp);\n\n  const calculateRemainingTime = (hour, minute) => {\n    const currentIndex = stationHourUp.findIndex((h) => h === hour);\n\n    for (let i = 0; i < stationHourUp.length; i++) {\n      const index = (currentIndex + i) % stationHourUp.length;\n      const minuteArrayForHour = stationMinuteUp[index];\n\n      for (let j = 0; j < minuteArrayForHour.length; j++) {\n        const currentMinuteValue = parseInt(minuteArrayForHour[j]);\n\n        if (currentMinuteValue > minute) {\n          return { hour, minute: currentMinuteValue - minute };\n        }\n      }\n    }\n\n    // If no future time is found, get the first time for the next day\n    const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n    const nextHour = stationHourUp[nextHourIndex];\n    const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n    const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n    return { hour: nextHour, minute: nextHourRemainingMinutes };\n  };\n\n  const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n  console.log(`남은 시간: ${remainingTime.minute}분`);\n\n  return (\n    <>\n      <h1>{StationIdData[id - 101].name}</h1>\n      <h2> {currentHour} 시</h2>\n      <h2>{`도착까지 ${remainingTime.minute}분 남았습니다.`}</h2>\n    </>\n  );\n}\n\nexport default ArrivalInfo;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}