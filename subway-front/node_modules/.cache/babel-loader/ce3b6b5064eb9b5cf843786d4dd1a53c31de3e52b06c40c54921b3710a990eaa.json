{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ArrivalInfo() {\n  _s();\n  var _StationIdData;\n  // URL 파라미터에서 id 추출\n  let {\n    id\n  } = useParams();\n\n  // Redux에서 역 정보 가져오기\n  const StationIdData = useSelector(state => state.StationNameData.stationId);\n\n  // 역 도착 정보를 담을 state\n  const [timeData, setTimeData] = useState([]);\n\n  // 역 도착 정보 API 호출 함수\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/${id}`); // :${id}를 ${id}로 수정\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  // 컴포넌트가 마운트되거나 id가 변경될 때 API 호출\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  // 현재 시간 정보 가져오기\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n\n  // 해당 역과 방향에 대한 도착 정보 필터링\n  const resStNum = timeData.filter(data => data.stNum === Number(id));\n  const resDrctUp = resStNum.filter(data => data.drctType === 0);\n\n  // 도착 시간과 분을 담을 배열 생성\n  const stationMinuteUp = resDrctUp.map(data => {\n    // data.tmList의 형식이 문자열이면 분리된 배열을 반환하고, 아니면 빈 배열을 반환\n    return typeof data.tmList === 'string' ? data.tmList.split(' ') : [];\n  });\n  const stationHourUp = resDrctUp.map(data => data.tmZone);\n\n  // 남은 도착 시간을 계산하는 함수\n  const calculateRemainingTime = (hour, minute) => {\n    var _stationMinuteUp$curr;\n    // 현재 시간대에 해당하는 시간의 인덱스 찾기\n    const currentIndex = stationHourUp.indexOf(hour);\n\n    // 인덱스가 유효하지 않거나 해당 시간대에 도착 정보가 없으면 null 반환\n    if (currentIndex === -1 || !((_stationMinuteUp$curr = stationMinuteUp[currentIndex]) !== null && _stationMinuteUp$curr !== void 0 && _stationMinuteUp$curr.length)) {\n      // 배열이 존재하면서 비어 있지 않은지 확인\n      return null;\n    }\n\n    // 해당 시간대의 분 정보 배열 가져오기\n    const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n    // 남은 도착 시간 계산\n    const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n      // 현재 분보다 나중에 도착하는 시간 찾기\n      const currentMinuteValue = parseInt(arrivalMinute);\n      if (currentMinuteValue > minute) {\n        return {\n          hour,\n          minute: currentMinuteValue - minute\n        };\n      }\n      return null;\n    }).filter(Boolean);\n\n    // 남은 도착 시간이 있는 경우 첫 번째 값 반환\n    if (remainingTime.length > 0) {\n      return remainingTime[0];\n    }\n\n    // 다음 시간대로 넘어가기\n    const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n    const nextHour = stationHourUp[nextHourIndex];\n    const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n    const nextHourRemainingMinutes = 60 - minute + nextMinuteValue;\n\n    // 다음 시간대의 남은 도착 시간 반환\n    return {\n      hour: nextHour,\n      minute: nextHourRemainingMinutes\n    };\n  };\n\n  // 남은 도착 시간 계산\n  const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n  console.log(`남은 시간: ${remainingTime ? remainingTime.minute : '도착정보를 기다리는 중..'}분`);\n\n  // 화면에 출력\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_StationIdData = StationIdData[id - 101]) === null || _StationIdData === void 0 ? void 0 : _StationIdData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: remainingTime ? `${remainingTime.hour}시 ${remainingTime.minute}분` : '도착정보를 기다리는 중...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ArrivalInfo, \"vjNaqqgHCDQ3RiVDamtV0pi8j08=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ArrivalInfo;\nexport default ArrivalInfo;\nvar _c;\n$RefreshReg$(_c, \"ArrivalInfo\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useSelector","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ArrivalInfo","_s","_StationIdData","id","StationIdData","state","StationNameData","stationId","timeData","setTimeData","callApi","response","get","resultList","data","body","items","item","error","console","currentHour","Date","getHours","currentMinute","getMinutes","resStNum","filter","stNum","Number","resDrctUp","drctType","stationMinuteUp","map","tmList","split","stationHourUp","tmZone","calculateRemainingTime","hour","minute","_stationMinuteUp$curr","currentIndex","indexOf","length","minuteArrayForHour","remainingTime","arrivalMinute","currentMinuteValue","parseInt","Boolean","nextHourIndex","nextHour","nextMinuteValue","nextHourRemainingMinutes","log","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nfunction ArrivalInfo() {\n  // URL 파라미터에서 id 추출\n  let { id } = useParams();\n\n  // Redux에서 역 정보 가져오기\n  const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n  // 역 도착 정보를 담을 state\n  const [timeData, setTimeData] = useState([]);\n\n  // 역 도착 정보 API 호출 함수\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/${id}`); // :${id}를 ${id}로 수정\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  // 컴포넌트가 마운트되거나 id가 변경될 때 API 호출\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  // 현재 시간 정보 가져오기\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n\n  // 해당 역과 방향에 대한 도착 정보 필터링\n  const resStNum = timeData.filter((data) => data.stNum === Number(id));\n  const resDrctUp = resStNum.filter((data) => data.drctType === 0);\n\n  // 도착 시간과 분을 담을 배열 생성\n  const stationMinuteUp = resDrctUp.map((data) => {\n    // data.tmList의 형식이 문자열이면 분리된 배열을 반환하고, 아니면 빈 배열을 반환\n    return typeof data.tmList === 'string' ? data.tmList.split(' ') : [];\n  });\n  const stationHourUp = resDrctUp.map((data) => data.tmZone);\n\n  // 남은 도착 시간을 계산하는 함수\n  const calculateRemainingTime = (hour, minute) => {\n    // 현재 시간대에 해당하는 시간의 인덱스 찾기\n    const currentIndex = stationHourUp.indexOf(hour);\n\n    // 인덱스가 유효하지 않거나 해당 시간대에 도착 정보가 없으면 null 반환\n    if (currentIndex === -1 || !stationMinuteUp[currentIndex]?.length) { // 배열이 존재하면서 비어 있지 않은지 확인\n      return null;\n    }\n\n    // 해당 시간대의 분 정보 배열 가져오기\n    const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n    // 남은 도착 시간 계산\n    const remainingTime = minuteArrayForHour.map((arrivalMinute) => {\n      // 현재 분보다 나중에 도착하는 시간 찾기\n      const currentMinuteValue = parseInt(arrivalMinute);\n      if (currentMinuteValue > minute) {\n        return { hour, minute: currentMinuteValue - minute };\n      }\n      return null;\n    }).filter(Boolean);\n\n    // 남은 도착 시간이 있는 경우 첫 번째 값 반환\n    if (remainingTime.length > 0) {\n      return remainingTime[0];\n    }\n\n    // 다음 시간대로 넘어가기\n    const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n    const nextHour = stationHourUp[nextHourIndex];\n    const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n    const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n    // 다음 시간대의 남은 도착 시간 반환\n    return { hour: nextHour, minute: nextHourRemainingMinutes };\n  };\n\n  // 남은 도착 시간 계산\n  const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n\n  console.log(`남은 시간: ${remainingTime ? remainingTime.minute : '도착정보를 기다리는 중..'}분`);\n\n  // 화면에 출력\n  return (\n    <>\n      <h1>{StationIdData[id - 101]?.name}</h1>\n      <h2>{remainingTime ? `${remainingTime.hour}시 ${remainingTime.minute}분` : '도착정보를 기다리는 중...'}</h2>\n    </>\n  );\n}\n\nexport default ArrivalInfo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,cAAA;EACrB;EACA,IAAI;IAAEC;EAAG,CAAC,GAAGV,SAAS,CAAC,CAAC;;EAExB;EACA,MAAMW,aAAa,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACC,eAAe,CAACC,SAAS,CAAC;;EAE7E;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMmB,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAE,qCAAoCT,EAAG,EAAC,CAAC,CAAC,CAAC;MAC7E,MAAMU,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACC,KAAK,CAACC,IAAI;MACzDR,WAAW,CAACI,UAAU,CAAC;IACzB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;;EAED;EACA1B,SAAS,CAAC,MAAM;IACdkB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAACP,EAAE,CAAC,CAAC;;EAER;EACA,MAAMiB,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACzC,MAAMC,aAAa,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACG,UAAU,CAAC,CAAC;;EAE7C;EACA,MAAMC,QAAQ,GAAGjB,QAAQ,CAACkB,MAAM,CAAEZ,IAAI,IAAKA,IAAI,CAACa,KAAK,KAAKC,MAAM,CAACzB,EAAE,CAAC,CAAC;EACrE,MAAM0B,SAAS,GAAGJ,QAAQ,CAACC,MAAM,CAAEZ,IAAI,IAAKA,IAAI,CAACgB,QAAQ,KAAK,CAAC,CAAC;;EAEhE;EACA,MAAMC,eAAe,GAAGF,SAAS,CAACG,GAAG,CAAElB,IAAI,IAAK;IAC9C;IACA,OAAO,OAAOA,IAAI,CAACmB,MAAM,KAAK,QAAQ,GAAGnB,IAAI,CAACmB,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;EACtE,CAAC,CAAC;EACF,MAAMC,aAAa,GAAGN,SAAS,CAACG,GAAG,CAAElB,IAAI,IAAKA,IAAI,CAACsB,MAAM,CAAC;;EAE1D;EACA,MAAMC,sBAAsB,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;IAAA,IAAAC,qBAAA;IAC/C;IACA,MAAMC,YAAY,GAAGN,aAAa,CAACO,OAAO,CAACJ,IAAI,CAAC;;IAEhD;IACA,IAAIG,YAAY,KAAK,CAAC,CAAC,IAAI,GAAAD,qBAAA,GAACT,eAAe,CAACU,YAAY,CAAC,cAAAD,qBAAA,eAA7BA,qBAAA,CAA+BG,MAAM,GAAE;MAAE;MACnE,OAAO,IAAI;IACb;;IAEA;IACA,MAAMC,kBAAkB,GAAGb,eAAe,CAACU,YAAY,CAAC;;IAExD;IACA,MAAMI,aAAa,GAAGD,kBAAkB,CAACZ,GAAG,CAAEc,aAAa,IAAK;MAC9D;MACA,MAAMC,kBAAkB,GAAGC,QAAQ,CAACF,aAAa,CAAC;MAClD,IAAIC,kBAAkB,GAAGR,MAAM,EAAE;QAC/B,OAAO;UAAED,IAAI;UAAEC,MAAM,EAAEQ,kBAAkB,GAAGR;QAAO,CAAC;MACtD;MACA,OAAO,IAAI;IACb,CAAC,CAAC,CAACb,MAAM,CAACuB,OAAO,CAAC;;IAElB;IACA,IAAIJ,aAAa,CAACF,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAOE,aAAa,CAAC,CAAC,CAAC;IACzB;;IAEA;IACA,MAAMK,aAAa,GAAG,CAACT,YAAY,GAAG,CAAC,IAAIN,aAAa,CAACQ,MAAM;IAC/D,MAAMQ,QAAQ,GAAGhB,aAAa,CAACe,aAAa,CAAC;IAC7C,MAAME,eAAe,GAAGJ,QAAQ,CAACjB,eAAe,CAACmB,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;IACnE,MAAMG,wBAAwB,GAAI,EAAE,GAAGd,MAAM,GAAIa,eAAe;;IAEhE;IACA,OAAO;MAAEd,IAAI,EAAEa,QAAQ;MAAEZ,MAAM,EAAEc;IAAyB,CAAC;EAC7D,CAAC;;EAED;EACA,MAAMR,aAAa,GAAGR,sBAAsB,CAACjB,WAAW,EAAEG,aAAa,CAAC;EAExEJ,OAAO,CAACmC,GAAG,CAAE,UAAST,aAAa,GAAGA,aAAa,CAACN,MAAM,GAAG,gBAAiB,GAAE,CAAC;;EAEjF;EACA,oBACE1C,OAAA,CAAAE,SAAA;IAAAwD,QAAA,gBACE1D,OAAA;MAAA0D,QAAA,GAAArD,cAAA,GAAKE,aAAa,CAACD,EAAE,GAAG,GAAG,CAAC,cAAAD,cAAA,uBAAvBA,cAAA,CAAyBsD;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACxC/D,OAAA;MAAA0D,QAAA,EAAKV,aAAa,GAAI,GAAEA,aAAa,CAACP,IAAK,KAAIO,aAAa,CAACN,MAAO,GAAE,GAAG;IAAiB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA,eAChG,CAAC;AAEP;AAAC3D,EAAA,CA3FQD,WAAW;EAAA,QAELP,SAAS,EAGAC,WAAW;AAAA;AAAAmE,EAAA,GAL1B7D,WAAW;AA6FpB,eAAeA,WAAW;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}