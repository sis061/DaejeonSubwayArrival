{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n\n// import { useParams } from \"react-router-dom\";\n\n// import { useSelector } from \"react-redux\";\n// import axios from \"axios\";\n\n// function ArrivalInfo() {\n//   let { id } = useParams();\n//   const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n//   const [timeData, setTimeData] = useState([]);\n\n//   const callApi = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n//       const resultList = response.data.response.body.items.item;\n//       setTimeData(resultList);\n//     } catch (error) {\n//       console.error(\"Error fetching arrival info:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     callApi();\n//   }, [id]);\n\n//   //----------------------------------------\n\n//   // console.log(timeData)\n\n//   const currentHour = new Date().getHours();\n//   const currentDay = new Date().getDay();\n//   const currentMinute = new Date().getMinutes();\n\n//   const resStNum = timeData.filter((data)=> data.stNum === Number(id));\n//   const resDay = resStNum.filter((data)=> 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n//   const resDrctUp = resDay.filter((data)=> data.drctType === 0);\n//   const stationMinuteUp = resDrctUp.map((data)=>data?.tmList.split(' '));\n//   const stationHourUp = resDrctUp.map(data => data.tmZone);\n\n//   console.log(resDrctUp);\n\n//   const calculateRemainingTime = (hour, minute) => {\n//     const currentIndex = stationHourUp.indexOf(hour);\n//     const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n//     const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n//       const currentMinuteValue = parseInt(arrivalMinute);\n//       if (currentMinuteValue > minute) {\n//         return { hour, minute: currentMinuteValue - minute };\n//       }\n//       return null;\n//     }).filter(Boolean);\n\n//     if (remainingTime.length > 0) {\n//       return remainingTime[0];\n//     }\n\n//     const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n//     const nextHour = stationHourUp[nextHourIndex];\n//     const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n//     const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n//     return { hour: nextHour, minute: nextHourRemainingMinutes };\n//   };\n\n//   const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n//   console.log(`남은 시간: ${remainingTime.minute}분`);\n\n//   return (\n//     <>\n//       <h1>{StationIdData[id-101].name}</h1>\n//       <h2> {currentHour} 시</h2>\n//       {/* <h2>{timeData[0]?.tmList.split(\" \")[0]} 분</h2> */}\n//     </>\n//   );\n// }\n\n// export default ArrivalInfo;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ArrivalInfo() {\n  _s();\n  var _StationIdData;\n  let {\n    id\n  } = useParams();\n  const StationIdData = useSelector(state => state.StationNameData.stationId);\n  const [timeData, setTimeData] = useState([]);\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n  useEffect(() => {\n    callApi();\n  }, [id]);\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n  const resStNum = timeData.filter(data => data.stNum === Number(id));\n  const resDrctUp = resStNum.filter(data => data.drctType === 0);\n  const stationMinuteUp = resDrctUp.map(data => {\n    // data.tmList의 형식이 문자열이면 분리된 배열을 반환하고, 아니면 빈 배열을 반환\n    return typeof data.tmList === 'string' ? data.tmList.split(' ') : [];\n  });\n  const stationHourUp = resDrctUp.map(data => data.tmZone);\n\n  // console.log(resDrctUp);\n\n  // const calculateRemainingTime = (hour, minute) => {\n  //   const currentIndex = stationHourUp.indexOf(hour);\n\n  //   if (currentIndex === -1 || !stationMinuteUp[currentIndex]) {\n  //     return null;\n  //   }\n\n  //   const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n  //   const remainingTime = minuteArrayForHour.map((arrivalMinute) => {\n  //     const currentMinuteValue = parseInt(arrivalMinute);\n  //     if (currentMinuteValue > minute) {\n  //       return { hour, minute: currentMinuteValue - minute };\n  //     }\n  //     return null;\n  //   }).filter(Boolean);\n\n  //   if (remainingTime.length > 0) {\n  //     return remainingTime[0];\n  //   }\n\n  //   const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n  //   const nextHour = stationHourUp[nextHourIndex];\n  //   const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n  //   const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n  //   return { hour: nextHour, minute: nextHourRemainingMinutes };\n  // };\n\n  // const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n\n  // console.log(`남은 시간: ${remainingTime ? remainingTime.minute : '도착정보를 기다리는 중..'}분`);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_StationIdData = StationIdData[id - 101]) === null || _StationIdData === void 0 ? void 0 : _StationIdData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(ArrivalInfo, \"vjNaqqgHCDQ3RiVDamtV0pi8j08=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ArrivalInfo;\nexport default ArrivalInfo;\nvar _c;\n$RefreshReg$(_c, \"ArrivalInfo\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useSelector","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ArrivalInfo","_s","_StationIdData","id","StationIdData","state","StationNameData","stationId","timeData","setTimeData","callApi","response","get","resultList","data","body","items","item","error","console","currentHour","Date","getHours","currentMinute","getMinutes","resStNum","filter","stNum","Number","resDrctUp","drctType","stationMinuteUp","map","tmList","split","stationHourUp","tmZone","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n\n// import { useParams } from \"react-router-dom\";\n\n// import { useSelector } from \"react-redux\";\n// import axios from \"axios\";\n\n// function ArrivalInfo() {\n//   let { id } = useParams();\n//   const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n//   const [timeData, setTimeData] = useState([]);\n\n//   const callApi = async () => {\n//     try {\n//       const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n//       const resultList = response.data.response.body.items.item;\n//       setTimeData(resultList);\n//     } catch (error) {\n//       console.error(\"Error fetching arrival info:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     callApi();\n//   }, [id]);\n\n//   //----------------------------------------\n\n//   // console.log(timeData)\n\n//   const currentHour = new Date().getHours();\n//   const currentDay = new Date().getDay();\n//   const currentMinute = new Date().getMinutes();\n\n//   const resStNum = timeData.filter((data)=> data.stNum === Number(id));\n//   const resDay = resStNum.filter((data)=> 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n//   const resDrctUp = resDay.filter((data)=> data.drctType === 0);\n//   const stationMinuteUp = resDrctUp.map((data)=>data?.tmList.split(' '));\n//   const stationHourUp = resDrctUp.map(data => data.tmZone);\n\n//   console.log(resDrctUp);\n\n//   const calculateRemainingTime = (hour, minute) => {\n//     const currentIndex = stationHourUp.indexOf(hour);\n//     const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n//     const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n//       const currentMinuteValue = parseInt(arrivalMinute);\n//       if (currentMinuteValue > minute) {\n//         return { hour, minute: currentMinuteValue - minute };\n//       }\n//       return null;\n//     }).filter(Boolean);\n\n//     if (remainingTime.length > 0) {\n//       return remainingTime[0];\n//     }\n\n//     const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n//     const nextHour = stationHourUp[nextHourIndex];\n//     const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n//     const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n//     return { hour: nextHour, minute: nextHourRemainingMinutes };\n//   };\n\n\n//   const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n//   console.log(`남은 시간: ${remainingTime.minute}분`);\n\n//   return (\n//     <>\n//       <h1>{StationIdData[id-101].name}</h1>\n//       <h2> {currentHour} 시</h2>\n//       {/* <h2>{timeData[0]?.tmList.split(\" \")[0]} 분</h2> */}\n//     </>\n//   );\n// }\n\n// export default ArrivalInfo;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nfunction ArrivalInfo() {\n  let { id } = useParams();\n  const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n  const [timeData, setTimeData] = useState([]);\n\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/:${id}`);\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n\n  const resStNum = timeData.filter((data) => data.stNum === Number(id));\n  const resDrctUp = resStNum.filter((data) => data.drctType === 0);\n\n  const stationMinuteUp = resDrctUp.map((data) => {\n    // data.tmList의 형식이 문자열이면 분리된 배열을 반환하고, 아니면 빈 배열을 반환\n    return typeof data.tmList === 'string' ? data.tmList.split(' ') : [];\n  });\n  const stationHourUp = resDrctUp.map((data) => data.tmZone);\n\n  // console.log(resDrctUp);\n\n  // const calculateRemainingTime = (hour, minute) => {\n  //   const currentIndex = stationHourUp.indexOf(hour);\n\n  //   if (currentIndex === -1 || !stationMinuteUp[currentIndex]) {\n  //     return null;\n  //   }\n\n  //   const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n  //   const remainingTime = minuteArrayForHour.map((arrivalMinute) => {\n  //     const currentMinuteValue = parseInt(arrivalMinute);\n  //     if (currentMinuteValue > minute) {\n  //       return { hour, minute: currentMinuteValue - minute };\n  //     }\n  //     return null;\n  //   }).filter(Boolean);\n\n  //   if (remainingTime.length > 0) {\n  //     return remainingTime[0];\n  //   }\n\n  //   const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n  //   const nextHour = stationHourUp[nextHourIndex];\n  //   const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n  //   const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n  //   return { hour: nextHour, minute: nextHourRemainingMinutes };\n  // };\n\n  // const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n\n  // console.log(`남은 시간: ${remainingTime ? remainingTime.minute : '도착정보를 기다리는 중..'}분`);\n\n  return (\n    <>\n      <h1>{StationIdData[id - 101]?.name}</h1>\n      {/* <h2> {remainingTime ? remainingTime.minute : '도착정보를 기다리는 중...'}</h2> */}\n    </>\n  );\n}\n\nexport default ArrivalInfo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}