{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ArrivalInfo() {\n  _s();\n  var _StationIdData;\n  // URL 파라미터에서 id 추출\n  let {\n    id\n  } = useParams();\n\n  // Redux에서 역 정보 가져오기\n  const StationIdData = useSelector(state => state.StationNameData.stationId);\n\n  // 역 도착 정보를 담을 state\n  const [timeData, setTimeData] = useState([]);\n\n  // 역 도착 정보 API 호출 함수\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/${id}`);\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  // 컴포넌트가 마운트되거나 id가 변경될 때 API 호출\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  // 현재 시간 정보 가져오기\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n\n  // 해당 역과 방향에 대한 도착 정보 필터링\n  const resStNum = timeData.filter(data => data.stNum === Number(id));\n  const resDrctUp = resStNum.filter(data => data.drctType === 0);\n  const resDrctDown = resStNum.filter(data => data.drctType === 1);\n\n  // 도착 시간과 분을 담을 배열 생성\n  const extractMinutesArray = data => {\n    return typeof data.tmList === 'string' ? data.tmList.split(' ') : [];\n  };\n  const stationMinuteUp = resDrctUp.map(extractMinutesArray);\n  const stationHourUp = resDrctUp.map(data => data.tmZone);\n\n  // console.log(stationMinuteUp);\n\n  const stationMinuteDown = resDrctDown.map(extractMinutesArray);\n  const stationHourDown = resDrctDown.map(data => data.tmZone);\n\n  // 남은 도착 시간을 계산하는 함수\n  const calculateRemainingTime = (hour, minute, stationHour, stationMinute) => {\n    var _stationMinute$curren;\n    // 현재 시간대에 해당하는 역 시간의 인덱스 찾기\n    const currentIndex = stationHour.indexOf(hour);\n\n    // 인덱스가 유효하지 않거나 해당 시간대에 도착 정보가 없으면 null 반환\n    if (currentIndex === -1 || !((_stationMinute$curren = stationMinute[currentIndex]) !== null && _stationMinute$curren !== void 0 && _stationMinute$curren.length)) {\n      return null;\n    }\n\n    // 해당 시간대의 분 정보 배열 가져오기\n    const minuteArrayForHour = stationMinute[currentIndex];\n\n    // console.log(minuteArrayForHour);\n\n    // 남은 도착 시간 계산\n    const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n      // 현재 분보다 나중에 도착하는 시간 찾기\n      const currentMinuteValue = parseInt(arrivalMinute);\n      if (currentMinuteValue > minute) {\n        return {\n          hour,\n          minute: currentMinuteValue - minute\n        };\n      } else {\n        return null;\n      }\n    }).filter(Boolean);\n    //.filter(Boolean) 통해 남은 시간이 있는 경우만 필터링.\n\n    // console.log(remainingTime);\n\n    // 남은 도착 시간이 있는 경우 첫 번째 값 반환\n    if (remainingTime.length > 0) {\n      return remainingTime[0];\n    }\n\n    // 다음 시간대로 넘어가기\n    const nextHourIndex = (currentIndex + 1) % stationHour.length;\n    console.log(12 % 38);\n    const nextHour = stationHour[nextHourIndex];\n    const nextMinuteValue = parseInt(stationMinute[nextHourIndex][0]);\n    const nextHourRemainingMinutes = 60 - minute + nextMinuteValue;\n\n    // 다음 시간대의 남은 도착 시간 반환\n    return {\n      hour: nextHour,\n      minute: nextHourRemainingMinutes\n    };\n  };\n\n  // 남은 도착 시간 계산\n  const remainingTimeUp = calculateRemainingTime(currentHour, currentMinute, stationHourUp, stationMinuteUp);\n  const remainingTimeDown = calculateRemainingTime(currentHour, currentMinute, stationHourDown, stationMinuteDown);\n\n  // console.log(`남은 시간 (상행): ${remainingTimeUp ? remainingTimeUp.minute : '도착정보를 기다리는 중..'}분`);\n  // console.log(`남은 시간 (하행): ${remainingTimeDown ? remainingTimeDown.minute : '도착정보를 기다리는 중..'}분`);\n\n  // 화면에 출력\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_StationIdData = StationIdData[id - 101]) === null || _StationIdData === void 0 ? void 0 : _StationIdData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: remainingTimeUp ? `판암행: ${remainingTimeUp.minute}분` : '도착정보를 기다리는 중...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: remainingTimeDown ? `반석행: ${remainingTimeDown.minute}분` : '도착정보를 기다리는 중...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ArrivalInfo, \"vjNaqqgHCDQ3RiVDamtV0pi8j08=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ArrivalInfo;\nexport default ArrivalInfo;\nvar _c;\n$RefreshReg$(_c, \"ArrivalInfo\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useSelector","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ArrivalInfo","_s","_StationIdData","id","StationIdData","state","StationNameData","stationId","timeData","setTimeData","callApi","response","get","resultList","data","body","items","item","error","console","currentHour","Date","getHours","currentMinute","getMinutes","resStNum","filter","stNum","Number","resDrctUp","drctType","resDrctDown","extractMinutesArray","tmList","split","stationMinuteUp","map","stationHourUp","tmZone","stationMinuteDown","stationHourDown","calculateRemainingTime","hour","minute","stationHour","stationMinute","_stationMinute$curren","currentIndex","indexOf","length","minuteArrayForHour","remainingTime","arrivalMinute","currentMinuteValue","parseInt","Boolean","nextHourIndex","log","nextHour","nextMinuteValue","nextHourRemainingMinutes","remainingTimeUp","remainingTimeDown","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nfunction ArrivalInfo() {\n  // URL 파라미터에서 id 추출\n  let { id } = useParams();\n\n  // Redux에서 역 정보 가져오기\n  const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n  // 역 도착 정보를 담을 state\n  const [timeData, setTimeData] = useState([]);\n\n  // 역 도착 정보 API 호출 함수\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/${id}`);\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  // 컴포넌트가 마운트되거나 id가 변경될 때 API 호출\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  // 현재 시간 정보 가져오기\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n\n  // 해당 역과 방향에 대한 도착 정보 필터링\n  const resStNum = timeData.filter((data) => data.stNum === Number(id));\n  const resDrctUp = resStNum.filter((data) => data.drctType === 0);\n  const resDrctDown = resStNum.filter((data) => data.drctType === 1);\n\n  // 도착 시간과 분을 담을 배열 생성\n  const extractMinutesArray = (data) => {\n    return typeof data.tmList === 'string' ? data.tmList.split(' ') : [];\n  };\n\n  const stationMinuteUp = resDrctUp.map(extractMinutesArray);\n  const stationHourUp = resDrctUp.map((data) => data.tmZone);\n\n  // console.log(stationMinuteUp);\n\n  const stationMinuteDown = resDrctDown.map(extractMinutesArray);\n  const stationHourDown = resDrctDown.map((data) => data.tmZone);\n\n  // 남은 도착 시간을 계산하는 함수\nconst calculateRemainingTime = (hour, minute, stationHour, stationMinute) => {\n  // 현재 시간대에 해당하는 역 시간의 인덱스 찾기\n  const currentIndex = stationHour.indexOf(hour);\n\n  // 인덱스가 유효하지 않거나 해당 시간대에 도착 정보가 없으면 null 반환\n  if (currentIndex === -1 || !stationMinute[currentIndex]?.length) {\n    return null;\n  }\n\n  // 해당 시간대의 분 정보 배열 가져오기\n  const minuteArrayForHour = stationMinute[currentIndex];\n\n  // console.log(minuteArrayForHour);\n\n  // 남은 도착 시간 계산\n  const remainingTime = minuteArrayForHour.map((arrivalMinute) => {\n    // 현재 분보다 나중에 도착하는 시간 찾기\n    const currentMinuteValue = parseInt(arrivalMinute);\n    if (currentMinuteValue > minute) {\n      return { hour, minute: currentMinuteValue - minute };\n    } else {\n      return null;\n    }\n  }).filter(Boolean);\n  //.filter(Boolean) 통해 남은 시간이 있는 경우만 필터링.\n\n  // console.log(remainingTime);\n\n  // 남은 도착 시간이 있는 경우 첫 번째 값 반환\n  if (remainingTime.length > 0) {\n    return remainingTime[0];\n  }\n\n\n  // 다음 시간대로 넘어가기\n  const nextHourIndex = (currentIndex + 1) % stationHour.length;\n  console.log(12%38);\n  const nextHour = stationHour[nextHourIndex];\n  const nextMinuteValue = parseInt(stationMinute[nextHourIndex][0]);\n  const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n  // 다음 시간대의 남은 도착 시간 반환\n  return { hour: nextHour, minute: nextHourRemainingMinutes };\n};\n\n\n  // 남은 도착 시간 계산\n  const remainingTimeUp = calculateRemainingTime(currentHour, currentMinute, stationHourUp, stationMinuteUp);\n  const remainingTimeDown = calculateRemainingTime(currentHour, currentMinute, stationHourDown, stationMinuteDown);\n\n  // console.log(`남은 시간 (상행): ${remainingTimeUp ? remainingTimeUp.minute : '도착정보를 기다리는 중..'}분`);\n  // console.log(`남은 시간 (하행): ${remainingTimeDown ? remainingTimeDown.minute : '도착정보를 기다리는 중..'}분`);\n\n  // 화면에 출력\n  return (\n    <>\n      <h1>{StationIdData[id - 101]?.name}</h1>\n      <h2>{remainingTimeUp ? `판암행: ${remainingTimeUp.minute}분` : '도착정보를 기다리는 중...'}</h2>\n      <h2>{remainingTimeDown ? `반석행: ${remainingTimeDown.minute}분` : '도착정보를 기다리는 중...'}</h2>\n    </>\n  );\n}\n\nexport default ArrivalInfo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}