{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ArrivalInfo() {\n  _s();\n  let {\n    id\n  } = useParams();\n  const StationIdData = useSelector(state => state.StationNameData.stationId);\n  const [timeData, setTimeData] = useState([]);\n  const callApi = async () => {\n    await axios.get(`http://localhost:8000/arrivalinfo/:${id}`).then(res => {\n      let resultList = res.data.response.body.items.item;\n      setTimeData(resultList);\n    });\n  };\n  useEffect(() => {\n    callApi();\n  }, []);\n\n  //----------------------------------------\n\n  // console.log(timeData)\n\n  const currentHour = new Date().getHours();\n  const currentDay = new Date().getDay();\n  const currentMinute = new Date().getMinutes();\n  const resStNum = timeData.filter(data => data.stNum === Number(id));\n  const resDay = resStNum.filter(data => 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n  const resDrctUp = resDay.filter(data => data.drctType === 0);\n  const stationMinuteUp = resDrctUp.map(data => data === null || data === void 0 ? void 0 : data.tmList.split(' '));\n  const stationHourUp = resDrctUp.map(data => data.tmZone);\n  const stationHourUptoMin = stationHourUp.map(arr => arr * 60);\n\n  // const stationTimeStamp = stationMinuteUp.map((subArray) => subArray.map(value => parseInt(value) + stationHourUptoMin[subArray.indexOf(value)]));\n\n  console.log(resDay);\n\n  // const calculateRemainingTime = (hour, minute) => {\n  //   const currentIndex = stationHourUp.indexOf(hour);\n  //   const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n  //   const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n  //     const currentMinuteValue = parseInt(arrivalMinute);\n  //     if (currentMinuteValue > minute) {\n  //       return { hour, minute: currentMinuteValue - minute };\n  //     }\n  //     return null;\n  //   }).filter(Boolean);\n\n  //   if (remainingTime.length > 0) {\n  //     return remainingTime[0];\n  //   }\n\n  //   const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n  //   const nextHour = stationHourUp[nextHourIndex];\n  //   const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n  //   const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n  //   return { hour: nextHour, minute: nextHourRemainingMinutes };\n  // };\n\n  // const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n  // console.log(`남은 시간: ${remainingTime.minute}분`);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: StationIdData[id - 101].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", currentHour, \" \\uC2DC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ArrivalInfo, \"vjNaqqgHCDQ3RiVDamtV0pi8j08=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ArrivalInfo;\nexport default ArrivalInfo;\nvar _c;\n$RefreshReg$(_c, \"ArrivalInfo\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useSelector","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ArrivalInfo","_s","id","StationIdData","state","StationNameData","stationId","timeData","setTimeData","callApi","get","then","res","resultList","data","response","body","items","item","currentHour","Date","getHours","currentDay","getDay","currentMinute","getMinutes","resStNum","filter","stNum","Number","resDay","dayType","resDrctUp","drctType","stationMinuteUp","map","tmList","split","stationHourUp","tmZone","stationHourUptoMin","arr","console","log","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nfunction ArrivalInfo() {\n  let { id } = useParams();\n  const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n  const [timeData, setTimeData] = useState([]);\n\n  const callApi = async () => {\n    await axios.get(`http://localhost:8000/arrivalinfo/:${id}`).then((res) => {\n      let resultList = res.data.response.body.items.item;\n      setTimeData(resultList);\n    });\n  };\n\n  useEffect(() => {\n    callApi();\n  }, []);\n\n  //----------------------------------------\n\n  // console.log(timeData)\n\n  const currentHour = new Date().getHours();\n  const currentDay = new Date().getDay();\n  const currentMinute = new Date().getMinutes();\n\n  const resStNum = timeData.filter((data)=> data.stNum === Number(id));\n  const resDay = resStNum.filter((data)=> 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n  const resDrctUp = resDay.filter((data)=> data.drctType === 0);\n  const stationMinuteUp = resDrctUp.map((data)=>data?.tmList.split(' '));\n  const stationHourUp = resDrctUp.map(data => data.tmZone);\n  const stationHourUptoMin = stationHourUp.map(arr => arr*60);\n\n  // const stationTimeStamp = stationMinuteUp.map((subArray) => subArray.map(value => parseInt(value) + stationHourUptoMin[subArray.indexOf(value)]));\n\n  console.log(resDay);\n\n  // const calculateRemainingTime = (hour, minute) => {\n  //   const currentIndex = stationHourUp.indexOf(hour);\n  //   const minuteArrayForHour = stationMinuteUp[currentIndex];\n\n  //   const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n  //     const currentMinuteValue = parseInt(arrivalMinute);\n  //     if (currentMinuteValue > minute) {\n  //       return { hour, minute: currentMinuteValue - minute };\n  //     }\n  //     return null;\n  //   }).filter(Boolean);\n\n  //   if (remainingTime.length > 0) {\n  //     return remainingTime[0];\n  //   }\n\n  //   const nextHourIndex = (currentIndex + 1) % stationHourUp.length;\n  //   const nextHour = stationHourUp[nextHourIndex];\n  //   const nextMinuteValue = parseInt(stationMinuteUp[nextHourIndex][0]);\n  //   const nextHourRemainingMinutes = (60 - minute) + nextMinuteValue;\n\n  //   return { hour: nextHour, minute: nextHourRemainingMinutes };\n  // };\n\n\n  // const remainingTime = calculateRemainingTime(currentHour, currentMinute);\n  // console.log(`남은 시간: ${remainingTime.minute}분`);\n\n  return (\n    <>\n      <h1>{StationIdData[id-101].name}</h1>\n      <h2> {currentHour} 시</h2>\n      {/* <h2>{timeData[0]?.tmList.split(\" \")[0]} 분</h2> */}\n    </>\n  );\n}\n\nexport default ArrivalInfo;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB,IAAI;IAAEC;EAAG,CAAC,GAAGT,SAAS,CAAC,CAAC;EACxB,MAAMU,aAAa,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,eAAe,CAACC,SAAS,CAAC;EAE7E,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMkB,OAAO,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMd,KAAK,CAACe,GAAG,CAAE,sCAAqCR,EAAG,EAAC,CAAC,CAACS,IAAI,CAAEC,GAAG,IAAK;MACxE,IAAIC,UAAU,GAAGD,GAAG,CAACE,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,IAAI;MAClDV,WAAW,CAACK,UAAU,CAAC;IACzB,CAAC,CAAC;EACJ,CAAC;EAEDrB,SAAS,CAAC,MAAM;IACdiB,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA;;EAEA,MAAMU,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;EACzC,MAAMC,UAAU,GAAG,IAAIF,IAAI,CAAC,CAAC,CAACG,MAAM,CAAC,CAAC;EACtC,MAAMC,aAAa,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAACK,UAAU,CAAC,CAAC;EAE7C,MAAMC,QAAQ,GAAGnB,QAAQ,CAACoB,MAAM,CAAEb,IAAI,IAAIA,IAAI,CAACc,KAAK,KAAKC,MAAM,CAAC3B,EAAE,CAAC,CAAC;EACpE,MAAM4B,MAAM,GAAGJ,QAAQ,CAACC,MAAM,CAAEb,IAAI,IAAI,CAAC,GAAGQ,UAAU,IAAIA,UAAU,GAAG,CAAC,GAAGR,IAAI,CAACiB,OAAO,KAAK,CAAC,GAAGjB,IAAI,CAACiB,OAAO,KAAK,CAAC,CAAC;EACnH,MAAMC,SAAS,GAAGF,MAAM,CAACH,MAAM,CAAEb,IAAI,IAAIA,IAAI,CAACmB,QAAQ,KAAK,CAAC,CAAC;EAC7D,MAAMC,eAAe,GAAGF,SAAS,CAACG,GAAG,CAAErB,IAAI,IAAGA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEsB,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC;EACtE,MAAMC,aAAa,GAAGN,SAAS,CAACG,GAAG,CAACrB,IAAI,IAAIA,IAAI,CAACyB,MAAM,CAAC;EACxD,MAAMC,kBAAkB,GAAGF,aAAa,CAACH,GAAG,CAACM,GAAG,IAAIA,GAAG,GAAC,EAAE,CAAC;;EAE3D;;EAEAC,OAAO,CAACC,GAAG,CAACb,MAAM,CAAC;;EAEnB;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;;EAEA,oBACEjC,OAAA,CAAAE,SAAA;IAAA6C,QAAA,gBACE/C,OAAA;MAAA+C,QAAA,EAAKzC,aAAa,CAACD,EAAE,GAAC,GAAG,CAAC,CAAC2C;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrCpD,OAAA;MAAA+C,QAAA,GAAI,GAAC,EAACzB,WAAW,EAAC,SAAE;IAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAEzB,CAAC;AAEP;AAAChD,EAAA,CAvEQD,WAAW;EAAA,QACLP,SAAS,EACAC,WAAW;AAAA;AAAAwD,EAAA,GAF1BlD,WAAW;AAyEpB,eAAeA,WAAW;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}