{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { faCaretLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as styled from \"../styledComp/styledArrival\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ArrivalInfo() {\n  _s();\n  var _StationIdData;\n  // URL 파라미터에서 id 추출\n  let {\n    id\n  } = useParams();\n\n  // Redux에서 역 정보 가져오기\n  const StationIdData = useSelector(state => state.StationNameData.stationId);\n\n  // 역 도착 정보를 담을 state\n  const [timeData, setTimeData] = useState([]);\n\n  // 역 도착 정보 API 호출 함수\n  const callApi = async () => {\n    try {\n      const response = await axios.get(`http://localhost:8000/arrivalinfo/${id}`);\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  // 컴포넌트가 마운트되거나 id가 변경될 때 API 호출\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  // 현재 시간 정보 가져오기\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n\n  // 해당 역과 방향에 대한 도착 정보 필터링\n  const resStNum = timeData.filter(data => data.stNum === Number(id));\n  const currentDay = new Date().getDay();\n  // 주중(1~5, 월요일부터 금요일)인 경우 dayType이 0인 것만 선택, 그 외에는 dayType이 1인 것만 선택\n  const resDay = resStNum.filter(data => currentDay > 0 && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n\n  // 상행열차(0)만 선택\n  const resDrctUp = resDay.filter(data => data.drctType === 0);\n\n  // 하행열차(1)만 선택\n  const resDrctDown = resDay.filter(data => data.drctType === 1);\n\n  // 도착 시간과 분을 담을 배열 생성\n  const extractMinutesArray = data => {\n    return typeof data.tmList === \"string\" ? data.tmList.split(\" \") : [];\n  };\n  const stationMinuteUp = resDrctUp.map(extractMinutesArray);\n  const stationHourUp = resDrctUp.map(data => data.tmZone);\n  const stationMinuteDown = resDrctDown.map(extractMinutesArray);\n  const stationHourDown = resDrctDown.map(data => data.tmZone);\n\n  // 남은 도착 시간을 계산하는 함수\n  const calculateRemainingTime = (hour, minute, stationHour, stationMinute) => {\n    var _stationMinute$curren;\n    // 현재 시간대에 해당하는 역 시간의 인덱스 찾기\n    const currentIndex = stationHour.indexOf(hour);\n\n    // 인덱스가 유효하지 않거나 해당 시간대에 도착 정보가 없으면 null 반환\n    if (currentIndex === -1 || !((_stationMinute$curren = stationMinute[currentIndex]) !== null && _stationMinute$curren !== void 0 && _stationMinute$curren.length)) {\n      return null;\n    }\n\n    // 해당 시간대의 분 정보 배열 가져오기\n    const minuteArrayForHour = stationMinute[currentIndex];\n\n    // console.log(minuteArrayForHour);\n\n    // 남은 도착 시간 계산\n    const remainingTime = minuteArrayForHour.map(arrivalMinute => {\n      // 현재 분보다 나중에 도착하는 시간 찾기\n      const currentMinuteValue = parseInt(arrivalMinute);\n      if (currentMinuteValue > minute) {\n        return {\n          hour,\n          minute: currentMinuteValue - minute\n        };\n      } else {\n        return null;\n      }\n    }).filter(Boolean);\n    //.filter(Boolean) 통해 남은 시간이 있는 경우만 필터링.\n\n    // 남은 도착 시간이 있는 경우 첫 번째 값 반환\n    if (remainingTime.length > 0) {\n      return remainingTime[0];\n    }\n\n    // 다음 시간대로 넘어가기\n    const nextHourIndex = (currentIndex + 1) % stationHour.length;\n    const nextHour = stationHour[nextHourIndex];\n    const nextMinuteValue = parseInt(stationMinute[nextHourIndex][0]);\n    const nextHourRemainingMinutes = 60 - minute + nextMinuteValue;\n\n    // 다음 시간대의 남은 도착 시간 반환\n    return {\n      hour: nextHour,\n      minute: nextHourRemainingMinutes\n    };\n  };\n\n  // 남은 도착 시간 계산\n  const remainingTimeUp = calculateRemainingTime(currentHour, currentMinute, stationHourUp, stationMinuteUp);\n  const remainingTimeDown = calculateRemainingTime(currentHour, currentMinute, stationHourDown, stationMinuteDown);\n\n  // console.log(`남은 시간 (상행): ${remainingTimeUp ? remainingTimeUp.minute : '도착정보를 기다리는 중..'}분`);\n  // console.log(`남은 시간 (하행): ${remainingTimeDown ? remainingTimeDown.minute : '도착정보를 기다리는 중..'}분`);\n\n  // 화면에 출력\n  return /*#__PURE__*/_jsxDEV(styled.ArrivalInfo, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: `/`,\n      children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faCaretLeft,\n        size: \"500px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: (_StationIdData = StationIdData[id - 101]) === null || _StationIdData === void 0 ? void 0 : _StationIdData.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info-inner-wrap\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uD310\\uC554\\uD589\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: remainingTimeUp ? `${remainingTimeUp.minute}분` : \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uBC18\\uC11D\\uD589\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: remainingTimeDown ? `${remainingTimeDown.minute}분` : \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n}\n_s(ArrivalInfo, \"vjNaqqgHCDQ3RiVDamtV0pi8j08=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ArrivalInfo;\nexport default ArrivalInfo;\nvar _c;\n$RefreshReg$(_c, \"ArrivalInfo\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Link","useSelector","axios","faCaretLeft","FontAwesomeIcon","styled","jsxDEV","_jsxDEV","ArrivalInfo","_s","_StationIdData","id","StationIdData","state","StationNameData","stationId","timeData","setTimeData","callApi","response","get","resultList","data","body","items","item","error","console","currentHour","Date","getHours","currentMinute","getMinutes","resStNum","filter","stNum","Number","currentDay","getDay","resDay","dayType","resDrctUp","drctType","resDrctDown","extractMinutesArray","tmList","split","stationMinuteUp","map","stationHourUp","tmZone","stationMinuteDown","stationHourDown","calculateRemainingTime","hour","minute","stationHour","stationMinute","_stationMinute$curren","currentIndex","indexOf","length","minuteArrayForHour","remainingTime","arrivalMinute","currentMinuteValue","parseInt","Boolean","nextHourIndex","nextHour","nextMinuteValue","nextHourRemainingMinutes","remainingTimeUp","remainingTimeDown","children","to","icon","size","fileName","_jsxFileName","lineNumber","columnNumber","name","className","_c","$RefreshReg$"],"sources":["/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nimport { faCaretLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport * as styled from \"../styledComp/styledArrival\";\n\n\nfunction ArrivalInfo() {\n  // URL 파라미터에서 id 추출\n  let { id } = useParams();\n\n  // Redux에서 역 정보 가져오기\n  const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n  // 역 도착 정보를 담을 state\n  const [timeData, setTimeData] = useState([]);\n\n  // 역 도착 정보 API 호출 함수\n  const callApi = async () => {\n    try {\n      const response = await axios.get(\n        `http://localhost:8000/arrivalinfo/${id}`\n      );\n      const resultList = response.data.response.body.items.item;\n      setTimeData(resultList);\n    } catch (error) {\n      console.error(\"Error fetching arrival info:\", error);\n    }\n  };\n\n  // 컴포넌트가 마운트되거나 id가 변경될 때 API 호출\n  useEffect(() => {\n    callApi();\n  }, [id]);\n\n  // 현재 시간 정보 가져오기\n  const currentHour = new Date().getHours();\n  const currentMinute = new Date().getMinutes();\n\n  // 해당 역과 방향에 대한 도착 정보 필터링\n  const resStNum = timeData.filter((data) => data.stNum === Number(id));\n  const currentDay = new Date().getDay();\n  // 주중(1~5, 월요일부터 금요일)인 경우 dayType이 0인 것만 선택, 그 외에는 dayType이 1인 것만 선택\n  const resDay = resStNum.filter((data) =>\n    currentDay > 0 && currentDay < 6 ? data.dayType === 0 : data.dayType === 1\n  );\n\n  // 상행열차(0)만 선택\n  const resDrctUp = resDay.filter((data) => data.drctType === 0);\n\n  // 하행열차(1)만 선택\n  const resDrctDown = resDay.filter((data) => data.drctType === 1);\n\n  // 도착 시간과 분을 담을 배열 생성\n  const extractMinutesArray = (data) => {\n    return typeof data.tmList === \"string\" ? data.tmList.split(\" \") : [];\n  };\n\n  const stationMinuteUp = resDrctUp.map(extractMinutesArray);\n  const stationHourUp = resDrctUp.map((data) => data.tmZone);\n\n  const stationMinuteDown = resDrctDown.map(extractMinutesArray);\n  const stationHourDown = resDrctDown.map((data) => data.tmZone);\n\n  // 남은 도착 시간을 계산하는 함수\n  const calculateRemainingTime = (hour, minute, stationHour, stationMinute) => {\n    // 현재 시간대에 해당하는 역 시간의 인덱스 찾기\n    const currentIndex = stationHour.indexOf(hour);\n\n    // 인덱스가 유효하지 않거나 해당 시간대에 도착 정보가 없으면 null 반환\n    if (currentIndex === -1 || !stationMinute[currentIndex]?.length) {\n      return null;\n    }\n\n    // 해당 시간대의 분 정보 배열 가져오기\n    const minuteArrayForHour = stationMinute[currentIndex];\n\n    // console.log(minuteArrayForHour);\n\n    // 남은 도착 시간 계산\n    const remainingTime = minuteArrayForHour\n      .map((arrivalMinute) => {\n        // 현재 분보다 나중에 도착하는 시간 찾기\n        const currentMinuteValue = parseInt(arrivalMinute);\n        if (currentMinuteValue > minute) {\n          return { hour, minute: currentMinuteValue - minute };\n        } else {\n          return null;\n        }\n      })\n      .filter(Boolean);\n    //.filter(Boolean) 통해 남은 시간이 있는 경우만 필터링.\n\n    // 남은 도착 시간이 있는 경우 첫 번째 값 반환\n    if (remainingTime.length > 0) {\n      return remainingTime[0];\n    }\n\n    // 다음 시간대로 넘어가기\n    const nextHourIndex = (currentIndex + 1) % stationHour.length;\n    const nextHour = stationHour[nextHourIndex];\n    const nextMinuteValue = parseInt(stationMinute[nextHourIndex][0]);\n    const nextHourRemainingMinutes = 60 - minute + nextMinuteValue;\n\n    // 다음 시간대의 남은 도착 시간 반환\n    return { hour: nextHour, minute: nextHourRemainingMinutes };\n  };\n\n  // 남은 도착 시간 계산\n  const remainingTimeUp = calculateRemainingTime(\n    currentHour,\n    currentMinute,\n    stationHourUp,\n    stationMinuteUp\n  );\n  const remainingTimeDown = calculateRemainingTime(\n    currentHour,\n    currentMinute,\n    stationHourDown,\n    stationMinuteDown\n  );\n\n  // console.log(`남은 시간 (상행): ${remainingTimeUp ? remainingTimeUp.minute : '도착정보를 기다리는 중..'}분`);\n  // console.log(`남은 시간 (하행): ${remainingTimeDown ? remainingTimeDown.minute : '도착정보를 기다리는 중..'}분`);\n\n  // 화면에 출력\n  return (\n    <styled.ArrivalInfo>\n      <Link to= {`/`} >\n        <FontAwesomeIcon icon={faCaretLeft} size=\"500px\"/>\n      </Link>\n      <h1>{StationIdData[id - 101]?.name}</h1>\n      <div className=\"info-inner-wrap\">\n        <h3>판암행</h3>\n        <span>\n          {remainingTimeUp\n            ? `${remainingTimeUp.minute}분`\n            : \"Loading...\"}\n        </span>\n        <h3>반석행</h3>\n        <span>\n          {remainingTimeDown\n            ? `${remainingTimeDown.minute}분`\n            : \"Loading...\"}\n        </span>\n      </div>\n    </styled.ArrivalInfo>\n  );\n}\n\nexport default ArrivalInfo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}