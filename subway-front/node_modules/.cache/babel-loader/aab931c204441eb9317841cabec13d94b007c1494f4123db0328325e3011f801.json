{"ast":null,"code":"var _jsxFileName = \"/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ArrivalInfo() {\n  _s();\n  var _resDay$;\n  let {\n    id\n  } = useParams();\n  const StationIdData = useSelector(state => state.StationNameData.stationId);\n  const [timeData, setTimeData] = useState([]);\n  const callApi = async () => {\n    await axios.get(`http://localhost:8000/arrivalinfo/:${id}`).then(res => {\n      let resultList = res.data.response.body.items.item;\n      setTimeData(resultList);\n    });\n  };\n  useEffect(() => {\n    callApi();\n  }, []);\n\n  //----------------------------------------\n\n  // console.log(timeData)\n\n  const currentHour = new Date().getHours();\n  const currentDay = new Date().getDay();\n  const currentMinute = new Date().getMinutes();\n  const resStNum = timeData.filter(data => data.stNum === Number(id));\n  const resHour = resStNum.filter(data => data.tmZone === currentHour);\n  const resDay = resHour.filter(data => 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n  const resMinUp = (_resDay$ = resDay[0]) === null || _resDay$ === void 0 ? void 0 : _resDay$.tmList.split(\" \");\n  console.log(resMinUp);\n  const arrivalMinutes = [\"03\", \"09\", \"15\", \"21\", \"29\", \"39\", \"49\", \"59\"];\n  function findNearestArrivalTime(currentMinute) {\n    // 현재 시간의 분과 가장 가까운 도착 시간 찾기\n    const nearestArrival = arrivalMinutes.reduce((nearest, minute) => {\n      const minuteDiff = Math.abs(parseInt(minute) - currentMinute);\n      const nearestDiff = Math.abs(parseInt(nearest) - currentMinute);\n      return minuteDiff < nearestDiff ? minute : nearest;\n    }, arrivalMinutes[0]);\n\n    // 도착까지 남은 분 계산\n    const remainingMinutes = (parseInt(nearestArrival) - currentMinute + 60) % 60;\n    return {\n      nearestArrival,\n      remainingMinutes\n    };\n  }\n\n  // 결과 출력\n  const result = findNearestArrivalTime(currentMinute);\n  console.log(`가장 가까운 도착 시간: ${result.nearestArrival}`);\n  console.log(`도착까지 남은 분: ${result.remainingMinutes}`);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: StationIdData[id - 101].name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", currentHour, \" \\uC2DC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ArrivalInfo, \"vjNaqqgHCDQ3RiVDamtV0pi8j08=\", false, function () {\n  return [useParams, useSelector];\n});\n_c = ArrivalInfo;\nexport default ArrivalInfo;\nvar _c;\n$RefreshReg$(_c, \"ArrivalInfo\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useSelector","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","ArrivalInfo","_s","_resDay$","id","StationIdData","state","StationNameData","stationId","timeData","setTimeData","callApi","get","then","res","resultList","data","response","body","items","item","currentHour","Date","getHours","currentDay","getDay","currentMinute","getMinutes","resStNum","filter","stNum","Number","resHour","tmZone","resDay","dayType","resMinUp","tmList","split","console","log","arrivalMinutes","findNearestArrivalTime","nearestArrival","reduce","nearest","minute","minuteDiff","Math","abs","parseInt","nearestDiff","remainingMinutes","result","children","name","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sungwoojeong/Frontend/subway/subway-front/src/components/ArrivalInfo.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { useParams } from \"react-router-dom\";\n\nimport { useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nfunction ArrivalInfo() {\n  let { id } = useParams();\n  const StationIdData = useSelector((state) => state.StationNameData.stationId);\n\n  const [timeData, setTimeData] = useState([]);\n\n  const callApi = async () => {\n    await axios.get(`http://localhost:8000/arrivalinfo/:${id}`).then((res) => {\n      let resultList = res.data.response.body.items.item;\n      setTimeData(resultList);\n    });\n  };\n\n  useEffect(() => {\n    callApi();\n  }, []);\n\n  //----------------------------------------\n\n  // console.log(timeData)\n\n  const currentHour = new Date().getHours();\n  const currentDay = new Date().getDay();\n  const currentMinute = new Date().getMinutes();\n\n  const resStNum = timeData.filter((data)=>data.stNum === Number(id));\n  const resHour = resStNum.filter((data)=>data.tmZone === currentHour);\n  const resDay = resHour.filter((data)=> 0 < currentDay && currentDay < 6 ? data.dayType === 0 : data.dayType === 1);\n  const resMinUp = resDay[0]?.tmList.split(\" \");\n\n  console.log(resMinUp);\n\n\n  const arrivalMinutes = [\n    \"03\",\n    \"09\",\n    \"15\",\n    \"21\",\n    \"29\",\n    \"39\",\n    \"49\",\n    \"59\"\n  ];\n\n  function findNearestArrivalTime(currentMinute) {\n    // 현재 시간의 분과 가장 가까운 도착 시간 찾기\n    const nearestArrival = arrivalMinutes.reduce((nearest, minute) => {\n      const minuteDiff = Math.abs(parseInt(minute) - currentMinute);\n      const nearestDiff = Math.abs(parseInt(nearest) - currentMinute);\n      return minuteDiff < nearestDiff ? minute : nearest;\n    }, arrivalMinutes[0]);\n\n    // 도착까지 남은 분 계산\n    const remainingMinutes = (parseInt(nearestArrival) - currentMinute + 60) % 60;\n\n    return {\n      nearestArrival,\n      remainingMinutes\n    };\n  }\n\n  // 결과 출력\n  const result = findNearestArrivalTime(currentMinute);\n  console.log(`가장 가까운 도착 시간: ${result.nearestArrival}`);\n  console.log(`도착까지 남은 분: ${result.remainingMinutes}`);\n\n  return (\n    <>\n      <h1>{StationIdData[id-101].name}</h1>\n      <h2> {currentHour} 시</h2>\n      {/* <h2>{timeData[0]?.tmList.split(\" \")[0]} 분</h2> */}\n    </>\n  );\n}\n\nexport default ArrivalInfo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}